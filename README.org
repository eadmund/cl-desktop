#+OPTIONS: toc:2

* cl-desktop

CL-DESKTOP provides access to
[[https://www.freedesktop.org/wiki/Specifications/desktop-entry-spec/][freedesktop.org
desktop entries]].
** API

*** Variable ~XDG-DATA-HOME~
**** Value type
A pathname
**** Initial value
The value of ~$XDG_DATA_HOME~, or if that is unset or empty then
=~/.local/share/=
**** Description
This indicates the base directory relative to which user-specific data
files should be stored, per the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG Base Directory Specification]].

*** Variable ~XDG-CONFIG-HOME~
**** Value type
A pathname
**** Initial value
The value of ~$XDG_CONFIG_HOME~, or if that is unset or empty then
=~/.config/=
**** Description
This indicates the base directory relative to which user-specific
configuration files should be stored, per the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG Base Directory
Specification]].

*** Variable ~XDG-DATA-DIRS~
**** Value type
A list of pathnames
**** Initial value
The value of ~$XDG_DATA_DIRS~, or if that is unset or empty then
=("/usr/local/share" "/usr/share/")=
**** Description
This is a preference-ordered list of base directories to search for
data files in addition to ~*xdg-data-home*~, per the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG Base
Directory Specification]].

*** Variable ~XDG-CONFIG-DIRS~
**** Value type
A list of pathnames
**** Initial value
The value of ~$XDG_CONFIG_DIRS~, or if that is unset or empty then
=/etc/xdg=
**** Description
This is a preference-ordered list of base directories to search for
configuration files in additon to ~xdg-config-home*~, per the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG
Base Directory Specification]].

*** Variable ~XDG-CACHE-HOME~
**** Value type
A pathname
**** Initial value
The value of ~$XDG_CACHE_HOME~, or if that is unset or empty then
=~/.cache=
**** Description
This indicates the base directory relative to which user-specific
non-essential data files should be stored, per the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG Base Directory
Specification]].

*** Variable ~XDG-RUNTIME-DIR~
**** Value type
A pathname
**** Initial value
The value of ~$XDG_RUNTIME_DIR~, or if that is unset or empty then
a randomly-created random directory of the form =/tmp/branch.XXXXXX=
**** Description
This indicates the base directory relative to which user-specific data
files should be stored, per the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG Base Directory Specification]].
**** Bugs
Random directory filename generation is only supported on SBCL, using
~SB-POSIX:MKDTEMP~.  Other implementations will encounter a warning if
~$XDG_CACHE_HOME~ is unset or empty.

*** Function ~PARSE-DESKTOP-FILE~
**** Syntax
     ~parse-desktop-file filespec → desktop-file~
**** Arguments and values
- ~filespec~ :: a pathname designator
- ~desktop-file~ :: an opaque object representing a parsed desktop file
**** Description
~parse-desktop-file~ reads a single desktop file from disk.  The
return value is currently a naked ordered hash table, but that should
actually change soon; client code should not rely on that.

*** Function ~LOAD-DESKTOP-FILES~
**** Syntax
     ~load-desktop-files &optional subdir → desktop-files~
**** Arguments and values
- ~subdir~ :: A subdirectory underneath ~*xdg-data-home*~ to search;
              defaults to =#P"applications/"=
- ~desktop-files~ :: A list containing all parsed desktop files found
**** Description
~load-desktop-files~ finds & parses all desktop files from ~subdir~
underneath ~*xdg-data-home*~.
**** Bugs
Currently, the filename or desktop file ID of a desktop file is not
preserved.  This means that it is not straightforward to read in, say,
all startup files and have ones higher in precedence mask ones lower
in precedence.

*** Function ~GET-STRING-KEY~
**** Syntax
     ~get-string-key key file &key group → value~
**** Arguments and values
- ~key~ :: a string
- ~file~ :: a desktop file, as returned from ~parse-desktop-file~
- ~group~ :: a string indicating the group to find the key in; the
  default is "Desktop Entry"
- ~value~ :: a string containing the un-escaped value associated with
  ~key~, or ~nil~
**** Description
~get-string-key~ searches ~file~ for the indicated key, which must
 indicate a single string value.  If found, any escape sequences are
 replaced and the value is returned.

*** Function ~GET-STRINGS-KEY~
**** Syntax
     ~get-strings-key key file &key group → items~
**** Arguments and values
- ~key~ :: a string
- ~file~ :: a desktop file, as returned from ~parse-desktop-file~
- ~group~ :: a string indicating the group to find the key in; the
  default is "Desktop Entry"
- ~items~ :: a list of strings containing the un-escaped values
             associated with ~key~, or ~nil~
**** Description
~get-strings-key~ searches ~file~ for the indicated key, which must
 indicate a ~#\;~-delimited string list.  If found, any escape
 sequences are replaced and the value is returned.

*** Function ~GET-LOCALE-STRING-KEY~
**** Syntax
     ~get-locale-string-key key file &key group locales → value~
**** Arguments and values
- ~key~ :: a string
- ~file~ :: a desktop file, as returned from ~parse-desktop-file~
- ~group~ :: a string indicating the group to find the key in; the
  default is "Desktop Entry"
- ~locales~ :: a list of each specific locale to search for; defaults
               to a sensible value based on ~$LC_MESSAGES~, per the
               rules in the XDG Desktop Entry Specification, e.g. if
               ~$LC_MESSAGES~ is "en_GB.UTF-8@oxon" then the default
               is ~("en_GB@oxon" "en_GB" "en@oxon" "en")~
- ~value~ :: a string containing the un-escaped value associated with
  ~key~, or ~nil~
**** Description
~get-locale-string-key~ searches ~file~ for the indicated key, which
 must indicate a single string value; it tries the most-specific
 possible locale first, then the least-specific, and eventually falls
 back to ~get-string-key~.  If found, any escape sequences are
 replaced and the value is returned.

*** Function ~GET-LOCALE-STRINGS-KEY~
**** Syntax
     ~get-locale-strings-key key file &key group locales → items~
**** Arguments and values
- ~key~ :: a string
- ~file~ :: a desktop file, as returned from ~parse-desktop-file~
- ~group~ :: a string indicating the group to find the key in; the
  default is "Desktop Entry"
- ~locales~ :: a list of each specific locale to search for; defaults
               to a sensible value based on ~$LC_MESSAGES~, per the
               rules in the XDG Desktop Entry Specification, e.g. if
               ~$LC_MESSAGES~ is "en_GB.UTF-8@oxon" then the default
               is ~("en_GB@oxon" "en_GB" "en@oxon" "en")~
- ~items~ :: a list of strings containing the un-escaped values
             associated with ~key~, or ~nil~
**** Description
~get-locale-strings-key~ searches ~file~ for the indicated key, which must
 indicate a ~#\;~-delimited string list; it tries the most-specific
 possible locale first, then the least-specific, and eventually falls
 back to ~get-string-key~.  If found, any escape
 sequences are replaced and the value is returned.

*** Function ~GET-BOOLEAN-KEY~
**** Syntax
     ~get-boolean-key key file &key group → value~
**** Arguments and values
- ~key~ :: a string
- ~file~ :: a desktop file, as returned from ~parse-desktop-file~
- ~group~ :: a string indicating the group to find the key in; the
  default is "Desktop Entry"
- ~value~ :: ~t~ or ~nil~
**** Description
~get-boolean-key~ searches ~file~ for the indicated key, which must
 indicate a single boolean value ("true" or "false).

*** Function ~GET-NUMBER-KEY~
**** Syntax
     ~get-number-key key file &key group → value~
**** Arguments and values
- ~key~ :: a string
- ~file~ :: a desktop file, as returned from ~parse-desktop-file~
- ~group~ :: a string indicating the group to find the key in; the
  default is "Desktop Entry"
- ~value~ :: a number
**** Description
~get-number-key~ searches ~file~ for the indicated key, which must
 indicate a single number value.
**** Bugs
Uses ~PARSE-NUMBER:PARSE-REAL-NUMBER~ rather than ~sscanf(3)~ or
~strtof(3)~, so the number format is not quite to spec.  Supporting
the POSIX C locale's number format is hard to do portably.
